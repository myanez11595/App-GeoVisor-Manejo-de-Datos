Lixiviados <- merge(Lixiviados,t_Lixiviados, by.x=c("Parámetro","Norma_tabla"), by.y=c("Parámetro","Norma_tabla"))
##########Reordenar tablas
Agua_cruda <- Agua_cruda[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_residual  <-Agua_residual[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_potable <- Agua_potable[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Suelohist <-Suelohist[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_rio<- Agua_rio[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Lixiviados <- Lixiviados[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
##########declarar como numerico
Lixiviados$Medición=round(as.double(Lixiviados$Medición),4)
Lixiviados$Límite_mínimo=round(as.double(Lixiviados$Límite_mínimo),4)
Lixiviados$Límite_máximo=round(as.double(Lixiviados$Límite_máximo),4)
Agua_rio$Medición=round(as.double(Agua_rio$Medición),4)
Agua_rio$Límite_mínimo=round(as.double(Agua_rio$Límite_mínimo),4)
Agua_rio$Límite_máximo=round(as.double(Agua_rio$Límite_máximo),4)
Agua_rio[Agua_rio$Límite_máximo==" ---"]=0
Agua_potable$Medición=round(as.double(Agua_potable$Medición),4)
Agua_potable$Límite_mínimo=round(as.double(Agua_potable$Límite_mínimo),4)
Agua_potable$Límite_máximo=round(as.double(Agua_potable$Límite_máximo),4)
Agua_residual$Medición=round(as.double(Agua_residual$Medición),4)
Agua_residual$Límite_mínimo=round(as.double(Agua_residual$Límite_mínimo),4)
Agua_residual$Límite_máximo=round(as.double(Agua_residual$Límite_máximo),4)
Agua_cruda$Medición=round(as.double(Agua_cruda$Medición),4)
Agua_cruda$Límite_mínimo=round(as.double(Agua_cruda$Límite_mínimo),4)
Agua_cruda$Límite_máximo=round(as.double(Agua_cruda$Límite_máximo),4)
Suelohist$Medición=round(as.double(Suelohist$Medición),4)
Suelohist$Límite_mínimo=round(as.double(Suelohist$Límite_mínimo),4)
Suelohist$Límite_máximo=round(as.double(Suelohist$Límite_máximo),4)
##Base Total
base=rbind(Agua_rio,Agua_potable,Agua_residual,Agua_cruda,Lixiviados,Suelohist)
########## Define UI for application that draws a histogram
mydata=Coordenadas
proj4string="+proj=utm +zone=17 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
xy=data.frame(x=Coordenadas$X_coord,y=Coordenadas$Y_coord)
pj=project(data.frame(x=Coordenadas$X_coord,y=Coordenadas$Y_coord),proj4string,inverse = T)
mydata$Lat=pj$y
mydata$Long=pj$x
Grupos <- mydata %>% split(mydata$Recurso)
pal <- colorFactor(topo.colors(8), domain=c(mydata$Recurso%>%unique()))
colnames(base)
View(Agua_cruda)
View(t_Agua_cruda)
View(Coordenadas)
names(Coordenadas)
runApp()
rsconnect::showLogs(appName="Marlon_Yanez_Dashboard",streaming=TRUE)
rsconnect::showLogs(appName="Marlon_Yanez_Dashboard",streaming=TRUE)
Encoding(Agua_cruda)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read_csv("www/db000_agua_cruda.csv")
Encoding(Agua_cruda)
Encoding(Agua_cruda$Central)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv",encoding = "UTF-8")
Agua_cruda
View(Agua_cruda)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv",encoding = "UTF-8")
Encoding(Agua_cruda$Central)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv",encoding="UTF-8")
Encoding(Agua_cruda$Central)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv")
Encoding(Agua_cruda$Central)
Encoding(Agua_cruda$ParÃ.metro)
library(dplyr)
library(ggplot2)
library(shiny)
library(DT)
library(ggrepel)
library(tidyr)
library(shinycssloaders)
library(shinythemes)
library(XML)
library(rvest)
library(httr)
library(SwimmeR)
library(png)
library(leaflet)
library(shinyWidgets)
library(proj4)
library(tidyverse)
library(tseries)
library(leaflet.extras)
library(plotly)
library(htmltools)
library(htmlwidgets)
library(sparkline)
library(reshape2)
library(data.table)
library(ggiraph)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(utf8)
library(formattable)
library(mapview)
library(webshot)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv")
Encoding(Agua_cruda$ParÃ.metro)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding='utf-8')
View(Agua_cruda)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="utf-8")
View(Agua_cruda)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="utf8")
stri_enc_list(simplify = FALSE)
install.packages("stringi")
install.packages("stringi")
library(stringi)
stri_enc_list(simplify = FALSE)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
Encoding(Agua_cruda$ParÃ.metro)
Encoding(Agua_cruda$Parámetro)
Encoding(Agua_cruda$Parámetro)="UTF-8"
Encoding(Agua_cruda$Parámetro)
Agua_cruda$Parámetro
shiny::runApp()
shiny::runApp()
install.packages("stringi")
runApp()
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
#colnames(Agua_cruda)[1]="Central"
#which(is.na(Agua_cruda), arr.ind=TRUE)
#Agua_cruda[is.na(Agua_cruda)]=0
#write.csv2(Agua_cruda[,2:ncol(Agua_cruda)],"base/db000_agua_cruda.csv")
Agua_residual  <- read.csv("www/db000_agua_residual.csv", encoding="UTF-8")
#colnames(Agua_residual)[1]="Central"
#Agua_residual[is.na(Agua_residual)]=0
#write.csv2(Agua_residual[,2:ncol(Agua_residual)],"www/db000_agua_residual.csv")
Agua_potable <- read.csv("www/db000_agua_potable.csv", encoding="UTF-8")
#colnames(Agua_potable)[1]="Central"
#Agua_potable[is.na(Agua_potable)]=0
#write.csv2(Agua_potable[,2:ncol(Agua_potable)],"www/db000_agua_potable.csv")
Suelohist <-read.csv("www/db102_suelos.csv", encoding="UTF-8")
#colnames(Suelohist)[1]="Central"
#Suelohist[is.na(Suelohist)]=0
#write.csv2(Suelohist[,2:ncol(Suelohist)],"www/db102_suelos.csv")
Agua_rio<- read.csv("www/db000_agua_rio.csv", encoding="UTF-8")
#colnames(Agua_rio)[1]="Central"
#Agua_rio[is.na(Agua_rio)]=0
#write.csv2(Agua_rio[,2:ncol(Agua_rio)],"www/db000_agua_rio.csv")
Coordenadas <- read.csv("www/Puntos de monitoreo.csv", encoding="UTF-8")
#colnames(Coordenadas)[1]="Central"
Lixiviados <- read.csv("www/db101_lixiviados.csv", encoding="UTF-8")
#colnames(Lixiviados)[1]="Central"
#Lixiviados[is.na(Lixiviados)]=0
#write.csv2(Lixiviados[,2:ncol(Lixiviados)],"www/db101_lixiviados.csv")
Agua_cruda$Medición=gsub(",",".",Agua_cruda$Medición)
Agua_residual$Medición=gsub(",",".",Agua_residual$Medición)
Agua_potable$Medición=gsub(",",".",Agua_potable$Medición)
Suelohist$Medición=gsub(",",".",Suelohist$Medición)
Agua_rio$Medición=gsub(",",".",Agua_rio$Medición)
Lixiviados$Medición=gsub(",",".",Lixiviados$Medición)
################Ingresar tablas
t_Agua_cruda <- read.csv("www/norma_ac.csv", encoding="UTF-8")
#colnames(t_Agua_cruda)[1]="Parámetro"
#Agua_rio[t_Agua_cruda$Límite_máximo==" ---"]=0
#write.csv2(t_Agua_cruda[,2:ncol(t_Agua_cruda)],"www/norma_ac.csv")
t_Agua_residual  <- read.csv("www/norma_ar.csv", encoding="UTF-8")
#colnames(t_Agua_residual)[1]="Parámetro"
#t_Agua_residual[is.na(t_Agua_residual)]=0
#write.csv2(t_Agua_residual[,2:ncol(t_Agua_residual)],"www/norma_ar.csv")
t_Agua_potable <- read.csv("www/norma_ap.csv", encoding="UTF-8")
#colnames(t_Agua_potable)[1]="Parámetro"
#t_Agua_potable[is.na(t_Agua_potable)]=0
#write.csv2(t_Agua_potable[,2:ncol(t_Agua_potable)],"www/norma_ap.csv")
t_Suelohist <-read.csv("www/norma_suelo.csv", encoding="UTF-8")
#colnames(t_Suelohist)[1]="Parámetro"
#t_Suelohist[is.na(t_Suelohist)]=0
#write.csv2(t_Suelohist[,2:ncol(t_Suelohist)],"www/norma_suelo.csv")
t_Agua_rio<- read.csv("www/norma_ario.csv", encoding="UTF-8")
#colnames(t_Agua_rio)[1]="Parámetro"
#t_Agua_rio[like("---"),]=0
#write.csv2(t_Agua_rio[,2:ncol(t_Agua_rio)],"www/norma_ario.csv")
t_Lixiviados <- read.csv("www/norma_lixiviados.csv", encoding="UTF-8")
#colnames(t_Lixiviados)[1]="Norma_tabla"
#t_Lixiviados[is.na(t_Lixiviados)]=0
#write.csv2(t_Lixiviados[,2:ncol(t_Lixiviados)],"www/norma_lixiviados.csv")
########## Limpieza de tablas
#t_Suelohist$Límite_mínimo[is.na(t_Suelohist$Límite_mínimo)]=0
##################Unir tablas
Agua_cruda <- merge(Agua_cruda,t_Agua_cruda,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_residual  <- merge(Agua_residual,t_Agua_residual,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_potable <- merge(Agua_potable,t_Agua_potable,by.x=c("Parámetro"), by.y=c("Parámetro"))
Suelohist <-merge(Suelohist,t_Suelohist,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_rio<- merge(Agua_rio,t_Agua_rio,by.x=c("Parámetro"), by.y=c("Parámetro"))
Lixiviados <- merge(Lixiviados,t_Lixiviados, by.x=c("Parámetro","Norma_tabla"), by.y=c("Parámetro","Norma_tabla"))
##########Reordenar tablas
Agua_cruda <- Agua_cruda[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_residual  <-Agua_residual[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_potable <- Agua_potable[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Suelohist <-Suelohist[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_rio<- Agua_rio[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Lixiviados <- Lixiviados[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
##########declarar como numerico
Lixiviados$Medición=round(as.double(Lixiviados$Medición),4)
Lixiviados$Límite_mínimo=round(as.double(Lixiviados$Límite_mínimo),4)
Lixiviados$Límite_máximo=round(as.double(Lixiviados$Límite_máximo),4)
Agua_rio$Medición=round(as.double(Agua_rio$Medición),4)
Agua_rio$Límite_mínimo=round(as.double(Agua_rio$Límite_mínimo),4)
Agua_rio$Límite_máximo=round(as.double(Agua_rio$Límite_máximo),4)
Agua_rio[Agua_rio$Límite_máximo==" ---"]=0
Agua_potable$Medición=round(as.double(Agua_potable$Medición),4)
Agua_potable$Límite_mínimo=round(as.double(Agua_potable$Límite_mínimo),4)
Agua_potable$Límite_máximo=round(as.double(Agua_potable$Límite_máximo),4)
Agua_residual$Medición=round(as.double(Agua_residual$Medición),4)
Agua_residual$Límite_mínimo=round(as.double(Agua_residual$Límite_mínimo),4)
Agua_residual$Límite_máximo=round(as.double(Agua_residual$Límite_máximo),4)
Agua_cruda$Medición=round(as.double(Agua_cruda$Medición),4)
Agua_cruda$Límite_mínimo=round(as.double(Agua_cruda$Límite_mínimo),4)
Agua_cruda$Límite_máximo=round(as.double(Agua_cruda$Límite_máximo),4)
Suelohist$Medición=round(as.double(Suelohist$Medición),4)
Suelohist$Límite_mínimo=round(as.double(Suelohist$Límite_mínimo),4)
Suelohist$Límite_máximo=round(as.double(Suelohist$Límite_máximo),4)
##Base Total
base=rbind(Agua_rio,Agua_potable,Agua_residual,Agua_cruda,Lixiviados,Suelohist)
########## Define UI for application that draws a histogram
mydata=Coordenadas
proj4string="+proj=utm +zone=17 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
xy=data.frame(x=Coordenadas$X_coord,y=Coordenadas$Y_coord)
pj=project(data.frame(x=Coordenadas$X_coord,y=Coordenadas$Y_coord),proj4string,inverse = T)
mydata$Lat=pj$y
mydata$Long=pj$x
Grupos <- mydata %>% split(mydata$Recurso)
pal <- colorFactor(topo.colors(8), domain=c(mydata$Recurso%>%unique()))
View(base)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
View(Agua_cruda)
t_Agua_cruda <- read.csv("www/norma_ac.csv", encoding="UTF-8")
View(t_Agua_cruda)
#webshot::install_phantomjs()
#install.packages("dplyr")
#library(tinytex)
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex::reinstall_tinytex()
#https://spatialreference.org/ref/epsg/32717/proj4js/
#rlang::last_error()
#Import Data
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
View(Agua_cruda)
#which(is.na(Agua_cruda), arr.ind=TRUE)
#Agua_cruda[is.na(Agua_cruda)]=0
#write.csv2(Agua_cruda[,2:ncol(Agua_cruda)],"base/db000_agua_cruda.csv")
Agua_residual  <- read.csv("www/db000_agua_residual.csv", encoding="UTF-8")
#which(is.na(Agua_cruda), arr.ind=TRUE)
#Agua_cruda[is.na(Agua_cruda)]=0
#write.csv2(Agua_cruda[,2:ncol(Agua_cruda)],"base/db000_agua_cruda.csv")
Agua_residual  <- read.csv("www/db000_agua_residual.csv", encoding="UTF-8")
View(Agua_residual)
runApp()
Agua_cruda <- read.csv("www/db000_agua_cruda.csv", encoding="UTF-8")
colnames(Agua_cruda)[1]="Central"
#which(is.na(Agua_cruda), arr.ind=TRUE)
#Agua_cruda[is.na(Agua_cruda)]=0
#write.csv2(Agua_cruda[,2:ncol(Agua_cruda)],"base/db000_agua_cruda.csv")
Agua_residual  <- read.csv("www/db000_agua_residual.csv", encoding="UTF-8")
colnames(Agua_residual)[1]="Central"
#Agua_residual[is.na(Agua_residual)]=0
#write.csv2(Agua_residual[,2:ncol(Agua_residual)],"www/db000_agua_residual.csv")
Agua_potable <- read.csv("www/db000_agua_potable.csv", encoding="UTF-8")
colnames(Agua_potable)[1]="Central"
#Agua_potable[is.na(Agua_potable)]=0
#write.csv2(Agua_potable[,2:ncol(Agua_potable)],"www/db000_agua_potable.csv")
Suelohist <-read.csv("www/db102_suelos.csv", encoding="UTF-8")
colnames(Suelohist)[1]="Central"
#Suelohist[is.na(Suelohist)]=0
#write.csv2(Suelohist[,2:ncol(Suelohist)],"www/db102_suelos.csv")
Agua_rio<- read.csv("www/db000_agua_rio.csv", encoding="UTF-8")
colnames(Agua_rio)[1]="Central"
#Agua_rio[is.na(Agua_rio)]=0
#write.csv2(Agua_rio[,2:ncol(Agua_rio)],"www/db000_agua_rio.csv")
Coordenadas <- read.csv("www/Puntos de monitoreo.csv", encoding="UTF-8")
colnames(Coordenadas)[1]="Central"
Lixiviados <- read.csv("www/db101_lixiviados.csv", encoding="UTF-8")
colnames(Lixiviados)[1]="Central"
#Lixiviados[is.na(Lixiviados)]=0
#write.csv2(Lixiviados[,2:ncol(Lixiviados)],"www/db101_lixiviados.csv")
Agua_cruda$Medición=gsub(",",".",Agua_cruda$Medición)
Agua_residual$Medición=gsub(",",".",Agua_residual$Medición)
Agua_potable$Medición=gsub(",",".",Agua_potable$Medición)
Suelohist$Medición=gsub(",",".",Suelohist$Medición)
Agua_rio$Medición=gsub(",",".",Agua_rio$Medición)
Lixiviados$Medición=gsub(",",".",Lixiviados$Medición)
################Ingresar tablas
t_Agua_cruda <- read.csv("www/norma_ac.csv", encoding="UTF-8")
#colnames(t_Agua_cruda)[1]="Parámetro"
#Agua_rio[t_Agua_cruda$Límite_máximo==" ---"]=0
#write.csv2(t_Agua_cruda[,2:ncol(t_Agua_cruda)],"www/norma_ac.csv")
t_Agua_residual  <- read.csv("www/norma_ar.csv", encoding="UTF-8")
#colnames(t_Agua_residual)[1]="Parámetro"
#t_Agua_residual[is.na(t_Agua_residual)]=0
#write.csv2(t_Agua_residual[,2:ncol(t_Agua_residual)],"www/norma_ar.csv")
t_Agua_potable <- read.csv("www/norma_ap.csv", encoding="UTF-8")
#colnames(t_Agua_potable)[1]="Parámetro"
#t_Agua_potable[is.na(t_Agua_potable)]=0
#write.csv2(t_Agua_potable[,2:ncol(t_Agua_potable)],"www/norma_ap.csv")
t_Suelohist <-read.csv("www/norma_suelo.csv", encoding="UTF-8")
#colnames(t_Suelohist)[1]="Parámetro"
#t_Suelohist[is.na(t_Suelohist)]=0
#write.csv2(t_Suelohist[,2:ncol(t_Suelohist)],"www/norma_suelo.csv")
t_Agua_rio<- read.csv("www/norma_ario.csv", encoding="UTF-8")
#colnames(t_Agua_rio)[1]="Parámetro"
#t_Agua_rio[like("---"),]=0
#write.csv2(t_Agua_rio[,2:ncol(t_Agua_rio)],"www/norma_ario.csv")
t_Lixiviados <- read.csv("www/norma_lixiviados.csv", encoding="UTF-8")
#colnames(t_Lixiviados)[1]="Norma_tabla"
#t_Lixiviados[is.na(t_Lixiviados)]=0
#write.csv2(t_Lixiviados[,2:ncol(t_Lixiviados)],"www/norma_lixiviados.csv")
########## Limpieza de tablas
#t_Suelohist$Límite_mínimo[is.na(t_Suelohist$Límite_mínimo)]=0
##################Unir tablas
Agua_cruda <- merge(Agua_cruda,t_Agua_cruda,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_residual  <- merge(Agua_residual,t_Agua_residual,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_potable <- merge(Agua_potable,t_Agua_potable,by.x=c("Parámetro"), by.y=c("Parámetro"))
Suelohist <-merge(Suelohist,t_Suelohist,by.x=c("Parámetro"), by.y=c("Parámetro"))
Agua_rio<- merge(Agua_rio,t_Agua_rio,by.x=c("Parámetro"), by.y=c("Parámetro"))
Lixiviados <- merge(Lixiviados,t_Lixiviados, by.x=c("Parámetro","Norma_tabla"), by.y=c("Parámetro","Norma_tabla"))
##########Reordenar tablas
Agua_cruda <- Agua_cruda[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_residual  <-Agua_residual[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_potable <- Agua_potable[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Suelohist <-Suelohist[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Agua_rio<- Agua_rio[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
Lixiviados <- Lixiviados[, c(2,3,4,5,6,7,8,1,12,13,14,9,10,11)]
##########declarar como numerico
Lixiviados$Medición=round(as.double(Lixiviados$Medición),4)
Lixiviados$Límite_mínimo=round(as.double(Lixiviados$Límite_mínimo),4)
Lixiviados$Límite_máximo=round(as.double(Lixiviados$Límite_máximo),4)
Agua_rio$Medición=round(as.double(Agua_rio$Medición),4)
Agua_rio$Límite_mínimo=round(as.double(Agua_rio$Límite_mínimo),4)
Agua_rio$Límite_máximo=round(as.double(Agua_rio$Límite_máximo),4)
Agua_rio[Agua_rio$Límite_máximo==" ---"]=0
Agua_potable$Medición=round(as.double(Agua_potable$Medición),4)
Agua_potable$Límite_mínimo=round(as.double(Agua_potable$Límite_mínimo),4)
Agua_potable$Límite_máximo=round(as.double(Agua_potable$Límite_máximo),4)
Agua_residual$Medición=round(as.double(Agua_residual$Medición),4)
Agua_residual$Límite_mínimo=round(as.double(Agua_residual$Límite_mínimo),4)
Agua_residual$Límite_máximo=round(as.double(Agua_residual$Límite_máximo),4)
Agua_cruda$Medición=round(as.double(Agua_cruda$Medición),4)
Agua_cruda$Límite_mínimo=round(as.double(Agua_cruda$Límite_mínimo),4)
Agua_cruda$Límite_máximo=round(as.double(Agua_cruda$Límite_máximo),4)
Suelohist$Medición=round(as.double(Suelohist$Medición),4)
Suelohist$Límite_mínimo=round(as.double(Suelohist$Límite_mínimo),4)
Suelohist$Límite_máximo=round(as.double(Suelohist$Límite_máximo),4)
##Base Total
base=rbind(Agua_rio,Agua_potable,Agua_residual,Agua_cruda,Lixiviados,Suelohist)
#Agua_rio[is.na(Agua_rio)]=0
#write.csv2(Agua_rio[,2:ncol(Agua_rio)],"www/db000_agua_rio.csv")
Coordenadas <- read.csv("www/Puntos de monitoreo.csv", encoding="UTF-8")
View(Coordenadas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(dplyr)
library(ggplot2)
library(shiny)
library(DT)
library(ggrepel)
library(tidyr)
library(shinycssloaders)
library(shinythemes)
library(XML)
library(rvest)
library(httr)
library(SwimmeR)
library(png)
library(leaflet)
library(shinyWidgets)
library(proj4)
library(tidyverse)
library(tseries)
library(leaflet.extras)
library(plotly)
library(htmltools)
library(htmlwidgets)
library(sparkline)
library(reshape2)
library(data.table)
library(ggiraph)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(utf8)
library(formattable)
library(mapview)
library(webshot)
runApp()
shiny::runApp()
